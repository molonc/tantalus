# -*- coding: utf-8 -*-
# Generated by Django 1.11.14 on 2018-07-17 21:46
from __future__ import unicode_literals

from django.db import migrations
import collections
import hashlib
import time


def get_samples(dataset):
    return list({r.sample for r in dataset.read_groups.all()})


def get_libraries(dataset):
    return list({r.dna_library for r in dataset.read_groups.all()})


def get_lane_str(lane):
    if lane.lane_number == '':
        return '{}'.format(lane.flowcell_id)
    else:
        return '{}_{}'.format(lane.flowcell_id, lane.lane_number)


def get_lanes_str(apps, dataset):
    SequenceLane = apps.get_model('tantalus', 'SequenceLane')

    lanes =  sorted(dataset.read_groups.values_list('sequence_lane', flat=True).distinct())
    lanes = [SequenceLane.objects.get(id=a) for a in lanes]
    lanes = ', '.join(sorted([get_lane_str(a) for a in lanes]))
    lanes = hashlib.md5(lanes)
    return 'lanes {}'.format(lanes.hexdigest()[:8])


def update_dataset_m2m(apps, olddataset, sequencedataset, library, add_index_sequence=False):
    SequencingLane = apps.get_model('tantalus', 'SequencingLane')

    index_sequences = set()
    for readgroup in olddataset.read_groups.all():
        lane, _ = SequencingLane.objects.get_or_create(
            flowcell_id=readgroup.sequence_lane.flowcell_id,
            lane_number=readgroup.sequence_lane.lane_number,
            dna_library=library,
            sequencing_centre=readgroup.sequence_lane.sequencing_centre,
            sequencing_instrument=readgroup.sequence_lane.sequencing_instrument,
            sequencing_library_id=readgroup.sequencing_library_id,
            read_type=readgroup.sequence_lane.read_type,
        )
        sequencedataset.sequence_lanes.add(lane)
        if readgroup.index_sequence is not None:
            index_sequences.add(readgroup.index_sequence)

    if add_index_sequence:
        assert len(index_sequences) == 1
        index_sequence = list(index_sequences)[0]

    for file_resource in olddataset.file_resources.all():
        sequencedataset.file_resources.add(file_resource)
        if add_index_sequence:
            assert file_resource.index_sequence is None or file_resource.index_sequence == index_sequence
            file_resource.index_sequence = index_sequence
            file_resource.save()

    for t in olddataset.tags.all():
        sequencedataset.tags.add(t)


def migrate_to_new_models(apps, schema_editor):
    BamFile = apps.get_model('tantalus', 'BamFile')
    PairedEndFastqFiles = apps.get_model('tantalus', 'PairedEndFastqFiles')
    Sample = apps.get_model('tantalus', 'Sample')
    DNALibrary = apps.get_model('tantalus', 'DNALibrary')
    SequenceDataset = apps.get_model('tantalus', 'SequenceDataset')
    SequencingLane = apps.get_model('tantalus', 'SequencingLane')
    SequenceLane = apps.get_model('tantalus', 'SequenceLane')

    name_check = collections.defaultdict(list)

    print 'non_sc_bams'
    for bamfile in BamFile.objects.exclude(read_groups__dna_library__library_type='SC_WGS').distinct():
        samples = get_samples(bamfile)
        libraries = get_libraries(bamfile)

        if len(samples) != 1 or len(libraries) != 1:
            samples = [Sample.objects.get_or_create(sample_id='PLACEHOLDER')[0]]
            libraries = [DNALibrary.objects.get_or_create(library_id='PLACEHOLDER')[0]]

        sample = samples[0]
        library = libraries[0]
        lanes = get_lanes_str(apps, bamfile)

        name = 'BAM-{}-{}-{} ({})'.format(
            sample.sample_id,
            library.library_type,
            library.library_id,
            lanes,
        )

        name_check[name].append(bamfile.id)
        if len(name_check[name]) > 1:
            name = name + ' ' + str(len(name_check[name]))

        sequencedataset, _ = SequenceDataset.objects.get_or_create(
            dataset_type='BAM',
            sample=sample,
            library=library,
            reference_genome=bamfile.reference_genome,
            aligner=bamfile.aligner,
            name=name,
        )

        update_dataset_m2m(apps, bamfile, sequencedataset, library, add_index_sequence=False)

    print 'sc_bams', BamFile.objects.filter(read_groups__dna_library__library_type='SC_WGS').distinct().count()
    i = 0
    start_time = time.time()
    for bamfile in BamFile.objects.filter(read_groups__dna_library__library_type='SC_WGS').distinct():
        if i % 1000 == 0:
            elapsed_time = time.time() - start_time
            print i, elapsed_time
        i += 1

        samples = get_samples(bamfile)
        libraries = get_libraries(bamfile)

        if len(samples) != 1 or len(libraries) != 1:
            raise Exception('sample error for {}'.format(bamfile.id))

        sample = samples[0]
        library = libraries[0]
        lanes = get_lanes_str(apps, bamfile)

        name = 'BAM-{}-{}-{} ({})'.format(
            sample.sample_id,
            library.library_type,
            library.library_id,
            lanes,
        )

        sequencedataset, _ = SequenceDataset.objects.get_or_create(
            dataset_type='BAM',
            sample=sample,
            library=library,
            reference_genome=bamfile.reference_genome,
            aligner=bamfile.aligner,
            name=name,
        )

        update_dataset_m2m(apps, bamfile, sequencedataset, library, add_index_sequence=True)

    print 'fq', PairedEndFastqFiles.objects.filter(read_groups__dna_library__library_type='SC_WGS').distinct().count()
    i = 0
    start_time = time.time()
    for fq in PairedEndFastqFiles.objects.filter(read_groups__dna_library__library_type='SC_WGS').distinct():
        if i % 1000 == 0:
            elapsed_time = time.time() - start_time
            print i, elapsed_time
        i += 1

        samples = get_samples(fq)
        libraries = get_libraries(fq)

        if len(samples) != 1 or len(libraries) != 1:
            raise Exception('sample error for {}'.format(fq.id))

        sample = samples[0]
        library = libraries[0]
        lanes = get_lanes_str(apps, fq)

        name = 'FQ-{}-{}-{} ({})'.format(
            sample.sample_id,
            library.library_type,
            library.library_id,
            lanes,
        )

        sequencedataset, _ = SequenceDataset.objects.get_or_create(
            dataset_type='FQ',
            sample=sample,
            library=library,
            name=name,
        )

        update_dataset_m2m(apps, fq, sequencedataset, library, add_index_sequence=True)


class Migration(migrations.Migration):

    dependencies = [
        ('tantalus', '0051_auto_20180719_1817'),
    ]

    operations = [
        migrations.RunPython(migrate_to_new_models)
    ]


