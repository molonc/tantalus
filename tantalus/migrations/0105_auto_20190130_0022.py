# -*- coding: utf-8 -*-
# Generated by Django 1.11.14 on 2019-01-30 00:22
from __future__ import unicode_literals

from django.db import migrations, models



def migrate_datasets(apps, schema_editor):
	SequenceDataset = apps.get_model('tantalus', 'SequenceDataset')
	ResultsDataset = apps.get_model('tantalus', 'ResultsDataset')
	Dataset = apps.get_model('tantalus', 'Dataset')
	Analysis = apps.get_model('tantalus', 'Analysis')

	print(SequenceDataset.objects.all().count())
	print(ResultsDataset.objects.all().count())
	print(Dataset.objects.all().count())

	count = 0
	for sequence in SequenceDataset.objects.all():
		dataset = Dataset(
			last_updated=sequence.last_updated,
			owner=sequence.owner,
			name=sequence.name,
			dataset_type=sequence.dataset_type,
			analysis=sequence.analysis,
			reference_genome=sequence.reference_genome,
			aligner=sequence.aligner,
			dataset_class='Sequence',
			previous_dataset_id=sequence.id,
		)
		dataset.save()
		dataset.tags = sequence.tags.all()
		dataset.samples = [sequence.sample]
		dataset.libraries = [sequence.library]
		dataset.file_resources = sequence.file_resources.all()
		dataset.sequence_lanes = sequence.sequence_lanes.all()
		dataset.save()
		count +=1
		if not count % 100:
			print(count)

	print(Dataset.objects.all().count())

	count = 0
	for result in ResultsDataset.objects.all():
		dataset = Dataset(
			owner=result.owner,
			name=result.name,
			results_type=result.results_type,
			results_version=result.results_version,
			analysis=result.analysis,
			dataset_class='Results',
			previous_dataset_id=result.id,
		)
		dataset.save()
		dataset.tags = result.tags.all()
		dataset.samples = result.samples.all()
		dataset.libraries = result.libraries.all()
		dataset.file_resources = result.file_resources.all()
		dataset.save()
		count +=1
		if not count % 100:
			print(count)

	print(Dataset.objects.all().count())

	count = 0
	for analysis in Analysis.objects.all():
		if(analysis.temp_sequence.all().count() == 0):
			pass
		else:
			input_datasets_list = list(analysis.temp_sequence.all())
			for dataset in input_datasets_list:
				if(Dataset.objects.filter(previous_dataset_id=dataset.id, dataset_class='Sequence').count() == 1):
					analysis.input_datasets.add(Dataset.objects.filter(previous_dataset_id=dataset.id, dataset_class='Sequence').first())
				else:
					raise Exception('More than one input dataset found')
		if(analysis.temp_result.all().count() == 0):
			pass
		else:
			input_results_list = list(analysis.temp_result.all())
			for result in input_results_list:
				if(Dataset.objects.filter(previous_dataset_id=result.id, dataset_class='Results').count() == 1):
					analysis.input_results.add(Dataset.objects.filter(previous_dataset_id=result.id, dataset_class='Results').first())
				else:
					raise Exception('More than one input result dataset found')
		analysis.save()
		count +=1
		print(count)



class Migration(migrations.Migration):

    dependencies = [
        ('tantalus', '0104_auto_20190130_0019'),
    ]

    operations = [
        migrations.AlterField(
            model_name='analysis',
            name='input_datasets',
            field=models.ManyToManyField(blank=True, related_name='inputdatasets', to='tantalus.Dataset'),
        ),
        migrations.AlterField(
            model_name='analysis',
            name='input_results',
            field=models.ManyToManyField(blank=True, related_name='inputresults', to='tantalus.Dataset'),
        ),
    	migrations.RunPython(migrate_datasets),
    ]
